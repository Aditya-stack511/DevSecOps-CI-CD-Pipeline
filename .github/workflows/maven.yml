name: DevSecOps Pipeline
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
#  sonarcloud:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          # Disabling shallow clone is recommended for improving relevancy of reporting
#          fetch-depth: 0
#      - name: SonarCloud Scan
#        run: ./mvnw -Dmaven.test.skip=true -X -B verify sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.projectKey=jpetstore -Dsonar.organization=default -Dsonar.login=d218cbce2137ce83403595d0116ec8046bfbbeb6
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: d218cbce2137ce83403595d0116ec8046bfbbeb6

#  snyk:
#    runs-on: ubuntu-latest
##    needs: sonarcloud
#    steps:
#      - uses: actions/checkout@v2
#        with:
#        # Disabling shallow clone is recommended for improving relevancy of reporting
#          fetch-depth: 0
#      - name: Run Snyk to check for vulnerabilities
#        uses: snyk/actions/Maven@master # For node projects, change accordingly
#        env:
#          SNYK_TOKEN: dd2cc2e7-882e-4a96-9d2d-527da5cb745a
#        with:
#          command: monitor


#  sonar:
#    name: Inspect - Using Sonar
#    runs-on: ubuntu-latest
##    needs: [ test ]
#
#    steps:
#      - name: Check out the code
#        uses: actions/checkout@v1
#        with:
#          fetch-depth: 0
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11
#      - name: Cache SonarCloud packages
#        uses: actions/cache@v1
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#      - name: Cache Maven packages
#        uses: actions/cache@v1
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#      - name: Build and analyze
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: mvn -B verify -DexcludedGroups="Smoke | Staging | LamdaTest | BrowserStack" org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.issuesReport.html.enable=true -Dsonar.projectKey=jpetstore
#      - name: SonarQube Quality Gate check
#        uses: sonarsource/sonarqube-quality-gate-action@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        timeout-minutes: 5
#        with:
#          scanMetadataReportFile: target/sonar/report-task.txt


  gitleaks:
    name: secret scan using Gitleaks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  CodeQL-Build:
    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest
    runs-on: ubuntu-latest
    needs: [gitleaks]
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        # Override language selection by uncommenting this and choosing your languages
        # with:
        #   languages: go, javascript, csharp, python, cpp, java
      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below).
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following
      #    three lines and modify them (or add more) to build your code if your
      #    project uses a compiled language
      #- run: |
      #     make bootstrap
      #     make release
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  snykScan:
    name: SCA Scan using Snyk
    runs-on: ubuntu-latest
    needs: [CodeQL-Build]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Maven
        run: mvn -N io.takari:maven:wrapper -Dmaven=3.8.2
      - name: Run Snyk to check for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/maven-3-jdk-11@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  dockerHubImageBuild:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest
      needs: [snykScan]

      steps:
        - name: Check out the repo
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
        - name: Set up JDK 11
          uses: actions/setup-java@v1
          with:
            java-version: 11
        - name: Cache Maven packages
          uses: actions/cache@v1
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
        - name: Package
          run: mvn -B clean package -DskipTests
        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Extract metadata (tags, labels) for Docker
          id: meta
          uses: docker/metadata-action@v2
          with:
            images: kda78/rd06

        - name: Build and push Docker image
          uses: docker/build-push-action@v3
          with:
            context: .
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}

  Trivy:
      name: Image scan by Trivy
      runs-on: ubuntu-20.04
      needs: [dockerHubImageBuild]
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Build an image from Dockerfile
          run: |
            docker build -t hub.docker.com/r/kda78/rd06:${{ github.sha }} .
        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: 'hub.docker.com/r/kda78/rd06:${{ github.sha }}'
            format: 'sarif'
            output: 'trivy-results.sarif'

        - name: Upload Trivy scan results to GitHub Security tab
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: 'trivy-results.sarif'


  zap_scan:
    runs-on: ubuntu-latest
    name: zap
    needs: [Trivy]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.6.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: 'https://petstore.octoperf.com/actions/Catalog.action' # Change URL or IP of your target application
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  nuclei-scan:
    runs-on: ubuntu-latest
    needs: [zap_scan]
    steps:
      - uses: actions/checkout@v2

      - name: Nuclei - Vulnerability Scan
        uses: projectdiscovery/nuclei-action@main
        with:
          target: 'https://petstore.octoperf.com/actions/Catalog.action'

      - name: GitHub Workflow artifacts
        uses: actions/upload-artifact@v2
        with:
          name: nuclei.log
          path: nuclei.log

      - name: GitHub Security Dashboard Alerts update
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: nuclei.sarif